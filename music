#!/usr/bin/env bash
# Simple Music Script
# Author: PietroVN
# Requirements: mpv,youtube-dl(or any fork | optional), sed, curl(optional), search(optional)
# Usage:
# 	music <command>
#	play <song name>
#	play FILE:<path to file>
#	play FOLDER:<full path to folder> (Basically playlist)
# 	play PLAYLIST:<full path to txt file>
#	play URL:<url>
#	play SEARCH:<song to search>
#	next
#	prev
# 	seek  <time>
# 	advance (will advance music 5 seconds)
# 	return (will return music 5 seconds)
#	pause
# 	loop
# 	quit
# 	stop
# 	e.g music play hollow knight ost

# Include search
. /usr/local/bin/search

# get args (music name | command)
COMMAND=$@

# Youtube (Youtube downloader)
YT=$(ls /usr/bin | grep yt-)
MUSICS_FOLDER=~/musics

stop_() {
	echo '{ "command": ["quit"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
	[[ -f "${XDG_RUNTIME_DIR}/mpvpause" ]] && rm "${XDG_RUNTIME_DIR}/mpvpause"
}

info() {
	if [[ $(cat ${XDG_RUNTIME_DIR}/mode) == *"LOCAL"* ]]; then
		echo "Music name: $(basename $(echo '{ "command": ["get_property", "path"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket) | sed 's/\".*//')"
	else
		echo "Music name:    $(cat ${XDG_RUNTIME_DIR}/name)"
	fi
}

seek() {
	sed "s/SEEK/$(echo ${COMMAND} | awk '{print $2}')/g" <<< '{ "command": ["set_property", "playback-time", "SEEK"] }'  | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
}

advance() {
	echo '{ "command": ["seek", "+5"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
	echo "Advanced: 5 seconds"
}

next() {		
	echo 'playlist-next' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
}
return_() {
	echo '{ "command": ["seek", "-5"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
	echo "Returned: 5 seconds"
}

prev() {
	echo 'playlist-prev' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
}

pause() {
	# Checks to determine if music will be paused or unpaused
	if [[ ! -f ${XDG_RUNTIME_DIR}/mpvpause ]]; then
		PAUSE=yes
	elif [[ $(cat ${XDG_RUNTIME_DIR}/mpvpause) == "yes" ]]; then
		PAUSE=no
	else
		PAUSE=yes
	fi

	# Apply
	sed "s/STATE/${PAUSE}/g" <<<'{ "command": ["set_property", "pause", "STATE"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null

	# Save pause state
	echo ${PAUSE} > ${XDG_RUNTIME_DIR}/mpvpause
}

play() {
	# Kill previous mpv instance
	[[ $(pidof mpv) ]] && killall "mpv"

	# Clear previous files
	[[ -f "${XDG_RUNTIME_DIR}/mpvsocket" ]] && rm "${XDG_RUNTIME_DIR}/mpvsocket"
	[[ -f ${XDG_RUNTIME_DIR}/mode ]] && rm "${XDG_RUNTIME_DIR}/mode"
	[[ -f ${XDG_RUNTIME_DIR}/name ]] && rm "${XDG_RUNTIME_DIR}/name"

	# Parameters
	[[ ${COMMAND} ==  *"--shuffle"* ]] && SHUFFLE=true

	# Check if user is using song name or url
	case ${COMMAND} in
		*"FILE:"*)
			MODE=LOCAL_FILE
		;;
		*"FOLDER:"*)
			MODE=LOCAL_FOLDER
		;;
		*"PLAYLIST:"*)
			MODE=LOCAL_PLAYLIST
		;;
		*"URL:"*)
			MODE=URL
		;;
		*"SEARCH:"*)
			MODE=SEARCH
		;;
	esac
				
	# Clear the command and leave only the title or ur√ß
	COMMAND=$(sed s/FILE://g <<<     ${COMMAND})
	COMMAND=$(sed s/FOLDER://g <<<   ${COMMAND})
	COMMAND=$(sed s/SEARCH://g <<<   ${COMMAND})
	COMMAND=$(sed s/URL://g <<<      ${COMMAND})
	COMMAND=$(sed s/PLAYLIST://g <<< ${COMMAND})
	COMMAND=$(sed s/--shuffle//g <<< ${COMMAND})
	COMMAND=$(sed s/play//g <<< ${COMMAND})

	case ${MODE} in 
		"LOCAL_FILE")
			# Play song
			mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket ${COMMAND} &

			# Save mode
			echo "LOCAL_FILE" >> ${XDG_RUNTIME_DIR}/mode
		;;
		"LOCAL_FOLDER")
			# Delete previous tmp playlist
			[[ -f "${XDG_RUNTIME_DIR}/tmp_playlist.txt" ]] && rm "${XDG_RUNTIME_DIR}/tmp_playlist.txt"

			# Generate a tmp playlist with files listed on directory
			for f in ${COMMAND}*; do echo ${f} >> ${XDG_RUNTIME_DIR}/tmp_playlist.txt; done

			# Play playlist
			[[ ! "${SHUFFLE}" ]] && mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket --playlist=${XDG_RUNTIME_DIR}/tmp_playlist.txt &
			[[   "${SHUFFLE}" ]] && mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket --shuffle  --playlist=${XDG_RUNTIME_DIR}/tmp_playlist.txt &

			# Save mpde
			echo "LOCAL_FOLDER" >> ${XDG_RUNTIME_DIR}/mode
		;;
		"LOCAL_PLAYLIST")
			# Delete previous tmp playlist
			[[ -f "${XDG_RUNTIME_DIR}/tmp_playlist.txt" ]] && rm "${XDG_RUNTIME_DIR}/tmp_playlist.txt"

			# Dump command playlist into tmp playlist (IDK why mpv don't work when using the playlist specified by the command)
			for f in $(cat ${COMMAND}); do
				echo ${f} >> ${XDG_RUNTIME_DIR}/tmp_playlist.txt
			done

			# Play playlist
			[[ ! "${SHUFFLE}" ]] && mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket --playlist=${XDG_RUNTIME_DIR}/tmp_playlist.txt &
			[[   "${SHUFFLE}" ]] && mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket --shuffle  --playlist=${XDG_RUNTIME_DIR}/tmp_playlist.txt &

			# Save mpde
			echo "LOCAL_FOLDER" >> ${XDG_RUNTIME_DIR}/mode
		;;
		"SEARCH")				
			# Use search to list musics
			search YOUTUBE:${COMMAND}
			echo ""

			# Ask the user to choose a song
			echo "Enter a song number:"
			read SONG_NUMBER

			# Select song url 
			SONG=$(cat ${TMP_VIDEOS} | sed -n ${SONG_NUMBER}p )
					
			# Play song
			mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket ${YOUTUBE}${SONG} &

			# Save mode
			echo "SEARCH" >> ${XDG_RUNTIME_DIR}/mode
			echo "$(${YT} --get-title "ytsearch:${COMMAND}")" >> ${XDG_RUNTIME_DIR}/name
		;;
		*)
			# Play song
			mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket ${COMMAND} &

			# Save name
			echo "URL" >> ${XDG_RUNTIME_DIR}/mode
			echo "$(${YT} --get-title ${COMMAND})" >> ${XDG_RUNTIME_DIR}/name
		;;
	esac

	# Wait mpvsocket start listening
	sleep 3

	# Re-enable previous options
	if [[ -f ${XDG_RUNTIME_DIR}/mpvloop && $(cat ${XDG_RUNTIME_DIR}/mpvloop) == "yes" ]]; then
		echo '{ "command": ["set_property", "loop", "yes"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
	fi

	# Informs the user
	case ${MODE} in 
		"SEARCH")
			echo "Now Playing: $(cat ${TMP_VIDEO_TITLES} | sed -n ${SONG_NUMBER}p)"	
		;;
		"URL")
			echo "Now Playing:    $(${YT} --get-title ${COMMAND})"
		;;
		"LOCAL_PLAYLIST")
			echo "Playlist size: $(cat ${COMMAND} | wc -l)"
			echo "Now Playing: $(basename $(echo '{ "command": ["get_property", "path"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket) | sed 's/\".*//')"
		;;
		"LOCAL_FOLDER")
			echo "Playlist size: $(ls ${COMMAND}/ | wc -l)"
			echo "Now Playing: $(basename $(echo '{ "command": ["get_property", "path"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket) | sed 's/\".*//')"
		;;
		*)
			echo "Now Playing: $(basename ${COMMAND})"
		;;
	esac
}

loop() {
	# Conditions to determine if loop will be enabled or disabled
	if [[ ! -f ${XDG_RUNTIME_DIR}/mpvloop ]]; then
		LOOP=yes
	elif [[ $(cat ${XDG_RUNTIME_DIR}/mpvloop) == "yes" ]]; then
		LOOP=no
	else
		LOOP=yes
	fi

	# Apply
	sed "s/STATE/${LOOP}/g" <<<'{ "command": ["set_property", "loop", "STATE"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null

	# Save loop state
	echo ${LOOP} > ${XDG_RUNTIME_DIR}/mpvloop

	# Informs the user
	echo "Loop: ${LOOP}"
}

# Check if command is empty
if [[ -z ${COMMAND} ]]; then
	echo "You need to enter a music name/link or a command"
	exit
fi

# Check if mpv is playing anything
if [[ ${COMMAND} != *"play"* && ! $(pgrep -f mpv) ]]; then
	echo "No MPV process detected, first you need to run: music play <music name/link>"
	exit
fi

# Command
case ${COMMAND} in
	*"play"*)
		play
	;;
	"pause")
		pause
	;;
	"advance")
		advance
	;;
	"skip")
		skip
	;;
	"return")
		return_
	;;
	"previous")
		previous
	;;
	"prev")
		previous
	;;
	"loop")
		loop
	;;
	"stop")
		stop_
	;;
esac
