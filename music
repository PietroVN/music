#!/usr/bin/env bash
#############################
# Author: Waltz				#
#############################
# 1 - TODO: Add queue support
# 2 - TODO: Add playlist support
# 3 - TODO: Add current list support
# 4 - TODO: Make this script posix compliant

# Options
notify="1"

# Include search library
. search

# get args (music name | command)
command="$@"

# Enviroment
mpvsocket="$XDG_RUNTIME_DIR/music-socket"
mpvpause="$XDG_RUNTIME_DIR/music-paused"
mpvloop="$XDG_RUNTIME_DIR/music-loop"
mpvmode="$XDG_RUNTIME_DIR/music-mode"
tmp_playlist="$XDG_RUNTIME_DIR/tmp_playlist.txt"
music_name_path="$XDG_RUNTIME_DIR/music-name"

# Youtube (Youtube downloader)
yt="youtube-dl"			# yt-dlp have a binary named youtube-dl for compatibility reasons
MUSICS_FOLDER="~/musics"

_help() {
	echo "======================================================================="
	echo "Music script"
	echo "======================================================================="
	echo "music play <song name/url>        | Play"
	echo "music loop                        | Toggle loop"
	echo "music stop                        | Stop"
	echo "music advance <seconds>           | Advance music in seconds"
	echo "music back <seconds>              | Return music in seconds"
	echo "music info                        | Current music info"
	echo "music seek <seconds>              | Go to specific second"
	echo "========================================================================"
	echo "Options:"
	echo "========================================================================"
	echo "-m/--max-videos                   | Limit how much songs will be visible"
	echo "========================================================================="
	echo "Author: Waltz"
	echo "========================================================================="
}

_stop() {
	echo '{ "command": ["quit"] }' | socat - "$mpvsocket" > "/dev/null"

	# Clear previous files
	[[ -f "$mpvsocket"			]] && rm "$mpvsocket"
	[[ -f "$mpvmode"			]] && rm "$mpvmode"
	[[ -f "$music_name_path"	]] && rm "$music_name_path"
	[[ -f "$tmp_playlist"		]] && rm "$tmp_playlist"
	[[ -f "$mpvpause"			]] && rm "$mpvpause"

	# Kill musicd
	for f in $(pgrep -a bash | grep -e "musicd" | awk '{print $1}'); do
		kill "$f"
	done
}

_info() {
	echo "Music name: $(cat "$music_name_path")"
}

_seek() {
	seek="$(echo $command | awk '{print $2}')"
	sed "s/SEEK/$seek/g" <<< '{ "command": ["set_property", "playback-time", "SEEK"] }' | socat - "$mpvsocket" > "/dev/null"
}

_advance() {
	advance="$(echo $command | awk '{print $2}')"
	sed  "s/ADVANCE/$advance/g" <<< '{ "command": ["seek", "+ADVANCE"] }' | socat - "$mpvsocket" > "/dev/null"
	echo "Skipped: $advance seconds"
}

_back() {
	back="$(echo $command | awk '{print $2}')"
	echo "s/BACK/$back/g" <<< '{ "command": ["seek", "-BACK"] }' | socat - "$mpvsocket" > "/dev/null"
	echo "Returned: $back seconds"
}

### TODO: 1
_next() {
	echo 'playlist-next' | socat - "$mpvsocket" > "/dev/null"
}

_prev() {
	echo 'playlist-prev' | socat - "$mpvsocket" > "/dev/null"
}
###

_pause() {
	# Checks to determine if music will be paused or unpaused
	if [[ -f "$mpvpause" ]]; then
		pause=yes
		rm "$mpvpause"
	elif [[ ! -f "$mpvpause" ]]; then
		pause=no
		touch "$mpvpause"
	fi

	# Apply
	sed "s/PAUSE/$pause/g" <<< '{ "command": ["set_property", "pause", "PAUSE"] }' | socat - "$mpvsocket" > "/dev/null"
}

_play() {
	# Kill previous mpv instance
	echo '{ "command": ["quit"] }' | socat - "$mpvsocket" > "/dev/null"

	# Call stop to cleanup files
	_stop
	
	case $command in
		*"https://"*)
			# Clear command
			command="$(sed 's/play//g' <<< $command)"
			command="$(sed 's/ //g' <<< $command)"

			# Play song
			mpv --no-terminal --no-video --input-ipc-server="$mpvsocket" "$command" &

			# Save name
			echo "url" > "$mpvmode"
			echo "$($yt --get-title $command)" > "$music_name_path"
		;;

		*)
			# Clear command
			command="$(sed 's/play//g' <<< $command)"

			# Use search to list musics
			search youtube "$command"

			# Ask the user to choose a song
			echo "Enter your choice:"
			read song_number

			# Select song url
			song="$(cat "$tmp_video_list" | sed -n "$song_number"p)"

			# Play song
			mpv --no-terminal --no-video --input-ipc-server="$mpvsocket" "$yt_url""$song" &

			# Misc
			music_name="$(cat "$tmp_video_titles_list" | sed -n "$song_number"p)"
			echo "search" > "$mpvmode"
			echo "$music_name" > "$music_name_path"
		;;
	esac

	# Wait mpvsocket start listening
	sleep 3

	# Re-enable previous options
	[[ -f "$mpvloop" ]] && echo '{ "command": ["set_property", "loop", "yes"] }' | socat - "$mpvsocket" > "/dev/null"

	# Informs the user
	echo "Now Playing: $(cat $music_name_path)"
	[[ -z "$notify" ]] || notify-send "Now Playing: $(cat $music_name_path)"
}

_loop() {
	# Conditions to determine if loop will be enabled or disabled
	if [[ ! -f "$mpvloop" ]]; then
		loop=yes
		rm "$mpvloop"
	elif [[ $(cat "$mpvloop") == "yes" ]]; then
		loop=no
		touch "$mpvloop"
	fi

	# Apply
	sed "s/LOOP/$loop/g" <<<'{ "command": ["set_property", "loop", "LOOP"] }' | socat - "$mpvsocket" > "/dev/null"

	# Informs the user
	echo "Loop: $loop"
}

# Check if command is empty
if [[ -z "$command" ]]; then
	echo "You need to enter a music name/link or a command"
	exit
fi

# Check if mpv is playing anything
if [[ "$command" != *"play"* && ! $(pgrep -f mpv) ]]; then
	echo "No MPV process detected, first you need to run: music play <music name/link>"
	exit
fi

# Command
case "$command" in
	*"play"*)		_play ;;
	*"pause"*)		_pause ;;
	*"advance"*)	_advance ;;
	*"skip"*)		_skip ;;
	*"back"*) 		_back ;;
	#*"prev"*)		_prev ;;
	#*"next"*)		_next ;;
	*"loop"*)		_loop ;;
	*"seek"*)		_seek ;;
	*"info"*)		_info ;;
	*"stop"*) 		_stop ;;
	*"help"*)		_help ;;
esac
