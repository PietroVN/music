#!/usr/bin/env bash
# Simple Music Script
# Author: PietroVN
# Requirements: mpv,youtube-dl(or any fork | optional), sed, curl(optional), search(optional)
# Usage:
# 	music <command>
#	play <song name>
#	play file:<path to file>
#	play folder:<full path to folder> (Basically playlist)
# 	play playlist:<full path to txt file>
#	play url:<url>
#	play search:<song to search>
#	next
#	prev
# 	seek  <time>
# 	advance (will advance music 5 seconds)
# 	return (will return music 5 seconds)
#	pause
# 	loop
# 	quit
# 	stop
# 	e.g music play hollow knight ost

# Include search
. /usr/local/bin/search

# get args (music name | command)
command=$@

# Enviroment
mpvsocket="${XDG_RUNTIME_DIR}/mpvsocket"
mpvpause="${XDG_RUNTIME_DIR}/mpvpause"
mpvloop="${XDG_RUNTIME_DIR}/mpvloop"
mpvmode="${XDG_RUNTIME_DIR}/mpvmode"
tmp_playlist="${XDG_RUNTIME_DIR}/tmp_playlist.txt"
music_name="${XDG_RUNTIME_DIR}/name"

# Youtube (Youtube downloader)
yt=youtube-dl
MUSICS_FOLDER=~/musics

stop_() {
	echo '{ "command": ["quit"] }' | socat - ${mpvsocket} > /dev/null
	[[ -f "${XDG_RUNTIME_DIR}/mpvpause" ]] && rm "${mpvpause}"
}

info() {
	if [[ $(cat ${XDG_RUNTIME_DIR}/mode) == *"LOCAL"* ]]; then
		echo "Music name: $(basename $(echo '{ "command": ["get_property", "path"] }' \
							| socat - ${mpvsocket}) | sed 's/\".*//')"
	else
		echo "Music name:    $(cat ${music_name})"
	fi
}

seek() {
	sed "s/SEEK/$(echo ${command} | awk '{print $2}')/g" <<< '{ "command": ["set_property", "playback-time", "SEEK"] }'  \
									| socat - ${mpvsocket} > /dev/null
}

advance() {
	echo '{ "command": ["seek", "+5"] }' | socat - ${mpvsocket} > /dev/null
	echo "Advanced: 5 seconds"
}

next() {		
	echo 'playlist-next' | socat - ${mpvsocket} > /dev/null
}
return_() {
	echo '{ "command": ["seek", "-5"] }' | socat - ${mpvsocket} > /dev/null
	echo "Returned: 5 seconds"
}

prev() {
	echo 'playlist-prev' | socat - ${mpvsocket} > /dev/null
}

pause() {
	# Checks to determine if music will be paused or unpaused
	if [[ ! -f ${mpvpause} ]]; then
		pause=yes
	elif [[ $(cat ${mpvpause}) == "yes" ]]; then
		pause=no
	else
		pause=yes
	fi

	# Apply
	sed "s/STATE/${pause}/g" <<<'{ "command": ["set_property", "pause", "STATE"] }' | socat - ${mpvsocket} > /dev/null

	# Save pause state
	echo ${pause} > ${mpvpause}
}

play() {
	# Kill previous mpv instance
	[[ $(pidof mpv) ]] && killall "mpv"

	# Clear previous files
	[[ -f "${mpvsocket}" ]] && rm "${mpvsocket}"
	[[ -f "${mpvmode}" ]] && rm "${mpvmode}"
	[[ -f "${music_name}" ]] && rm "${music_name}"
	[[ -f "${tmp_playlist}" ]] && rm "${tmp_playlist}"
	[[ -f "${mpvpause}" ]] && rm ${mpvpause}

	# Parameters
	[[ ${command} ==  *"--shuffle"* ]] && shuffle=true
	
	# Clear $command
	command=$(sed s/play//g <<< ${command})

	case ${command} in 
		*"file:"*)
			# Clear command
			command=$(sed 's/file://g' <<< ${command})

			# Play song
			mpv --no-terminal --no-video \
				--input-ipc-server=${mpvsocket} ${command} &

			# Save mode
			echo "file" >> ${mpvmode}
		;;
		*"folder:"*)
			# Clear command
			command=$(sed 's/folder://g' <<< ${command})

			# Generate a tmp playlist with files listed on directory
			for f in ${command}*; do echo ${f} >> ${tmp_playlist}; done

			# Play playlist
			[[ ! "${shuffle}" ]] && mpv --no-terminal --no-video \
										--input-ipc-server=${mpvsocket} \
										--playlist=${tmp_playlist} & 2>/dev/null
			[[   "${shuffle}" ]] && mpv --no-terminal --no-video \
										--input-ipc-server=${mpvsocket} \
										--shuffle  --playlist=${tmp_playlist} &

			# Save mpde
			echo "folder" >> ${mpvmode}
		;;
		*"playlist:"*)
			# Clear command
			command=$(sed 's/playlist://g' <<< ${command})

			# Dump command playlist into tmp playlist (IDK why mpv don't work when using the playlist specified by the command)
			for f in $(cat ${command}); do
				echo ${f} >> ${tmp_playlist}
			done

			# Play playlist
			[[ ! "${shuffle}" ]] && mpv --no-terminal --no-video \
										--input-ipc-server=${mpvsocket} \
										--playlist=${tmp_playlist} & 2>/dev/null
			[[   "${shuffle}" ]] && mpv --no-terminal --no-video \
										--input-ipc-server=${mpvsocket} \
										--shuffle  --playlist=${tmp_playlist} & 2>/dev/null

			# Save mode
			echo "playlist" >> ${mpvmode}
		;;
		*"search:"*)
			# Clear command
			command=$(sed 's/search://g' <<< ${command})

			# Use search to list musics
			search youtube:${command}
			echo ""

			# Ask the user to choose a song
			echo "Choose music:"
			read song_number

			# Select song url 
			song=$(cat ${tmp_videos} | sed -n ${song_number}p )
					
			# Play song
			mpv --no-terminal --no-video \
				--input-ipc-server=${mpvsocket} ${youtube_url}${song} &

			# Misc
			echo "search" >> ${mpvmode}
			echo "$(cat ${tmp_video_titles} | sed -n ${song_number}p)" >> ${music_name}
		;;
		*"url:"*)
			# Clear command
			command=$(sed 's/url://g' <<< ${command})

			# Play song
			mpv --no-terminal --no-video \
				--input-ipc-server=${mpvsocket} ${command} &

			# Save name
			echo "url" >> ${mpvmode}
			echo "$(${yt} --get-title ${command})" >> ${song_name}
		;;
	esac

	# Wait mpvsocket start listening
	sleep 3

	# Re-enable previous options
	if [[ -f ${mpvloop} && $(cat ${mpvloop}) == "yes" ]]; then
		echo '{ "command": ["set_property", "loop", "yes"] }' | socat - ${mpvsocket} > /dev/null
	fi

	# Informs the user
	case $(cat ${mpvmode}) in 
		"search")
			echo "Now Playing: $(cat ${tmp_video_titles} | sed -n ${song_number}p)"	
		;;
		"url")
			echo "Now Playing: $(${yt} --get-title ${command})"
		;;
		"playlist")
			echo "Playlist size: $(cat ${command} | wc -l)"
			echo "Now Playing: $(basename $(echo '{ "command": ["get_property", "path"] }' \
								| socat - ${mpvsocket}) | sed 's/\".*//')"
		;;
		"folder")
			echo "Playlist size: $(ls ${command}/ | wc -l)"
			echo "Now Playing: $(basename $(echo '{ "command": ["get_property", "path"] }' \
								| socat - ${mpvsocket}) | sed 's/\".*//')"
		;;
		*)
			echo "Now Playing: $(basename ${command})"
		;;
	esac
}

loop() {
	# Conditions to determine if loop will be enabled or disabled
	if [[ ! -f ${mpvloop} ]]; then
		loop=yes
	elif [[ $(cat ${mpvloop}) == "yes" ]]; then
		loop=no
	else
		loop=yes
	fi

	# Apply
	sed "s/STATE/${loop}/g" <<<'{ "command": ["set_property", "loop", "STATE"] }' | socat - ${mpvsocket} > /dev/null

	# Save loop state
	echo ${loop} > ${mpvloop}

	# Informs the user
	echo "Loop: ${loop}"
}

# Check if command is empty
if [[ -z ${command} ]]; then
	echo "You need to enter a music name/link or a command"
	exit
fi

# Check if mpv is playing anything
if [[ ${command} != *"play"* && ! $(pgrep -f mpv) ]]; then
	echo "No MPV process detected, first you need to run: music play <music name/link>"
	exit
fi

# Command
case ${command} in
	*"play"*)
		play
	;;
	"pause")
		pause
	;;
	"advance")
		advance
	;;
	"skip")
		skip
	;;
	"return")
		return_
	;;
	"previous")
		previous
	;;
	"prev")
		previous
	;;
	"loop")
		loop
	;;
	*"seek"*)
		seek
	;;
	"info")
		info
	;;
	"stop")
		stop_
	;;
esac
