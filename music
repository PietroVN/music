#!/usr/bin/env bash
# Simple Music Script
# Author: PietroVN
# Requirements: youtube-dl (Play songs from links), mpv (Playing songs), socat (Sending commands to mpv)
# Usage:
# 	music <command>
#	play <song name>
#	play FILE:<path to file>
#	play FOLDER:<full path to folder> (Basically playlist)
# 	play PLAYLIST:<full path to txt file>
#	play URL:<url>
#	play SEARCH:<song to search>
#	next
#	prev
# 	seek  <time>
# 	advance (will advance music 5 seconds)
# 	return (will return music 5 seconds)
#	pause
# 	loop
# 	quit
# 	stop
# 	e.g music play hollow knight ost

# Include search
. /usr/local/bin/search

# get args (music name | command)
COMMAND=$@

# Youtube (Youtube downloader)
YT=$(ls /usr/bin | grep yt-)
MUSICS_FOLDER=~/musics

# Commands
run_command () {
		# Quit / Stop
		if [[ ${COMMAND} == "quit" || ${COMMAND} == "stop" ]]; then
				echo '{ "command": ["quit"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
				echo "Music stopped"
				[[ -f "${XDG_RUNTIME_DIR}/mpvpause" ]] && rm "${XDG_RUNTIME_DIR}/mpvpause"
		fi

		# Info
		if [[ ${COMMAND} == "info" ]]; then
			if [[ $(cat ${XDG_RUNTIME_DIR}/mode) == *"LOCAL"* ]]; then
				echo "Music Name: $(basename $(echo '{ "command": ["get_property", "path"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket) | sed 's/\".*//')"
			else
				echo "Music name:    $(cat ${XDG_RUNTIME_DIR}/name)"
			fi
		fi

		# Seek
		if [[ ${COMMAND} == *"seek"* ]]; then
			sed "s/SEEK/$(echo ${COMMAND} | awk '{print $2}')/g" <<< '{ "command": ["set_property", "playback-time", "SEEK"] }'  | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
		fi

		# Advance
		if [[ ${COMMAND} == "advance" ]]; then
			echo '{ "command": ["seek", "+5"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
			echo "Advanced: 5 seconds"
		fi

		# Next
		if [[ ${COMMAND} == "next" ]]; then
			echo 'playlist-next' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
			echo "Music skipped"
		fi

		# Return
		if [[ ${COMMAND} == "return" ]]; then
			echo '{ "command": ["seek", "-5"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
			echo "Returned: 5 seconds"
		fi

		# Prev
		if [[ ${COMMAND} == "prev" || ${COMMAND} == "previous" ]]; then
			echo 'playlist-prev' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
			echo "Returning to previous song"
		fi

		# Pause
		if [[ ${COMMAND} == "pause" ]]; then
				# Checks to determine if music will be paused or played
				if [[ ! -f ${XDG_RUNTIME_DIR}/mpvpause ]]; then
					PAUSE=yes
				elif [[ $(cat ${XDG_RUNTIME_DIR}/mpvpause) == "yes" ]]; then
					PAUSE=no
				else
					PAUSE=yes
				fi

				# Apply
				sed "s/STATE/${PAUSE}/g" <<<'{ "command": ["set_property", "pause", "STATE"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null

				# Save pause state
				echo ${PAUSE} > ${XDG_RUNTIME_DIR}/mpvpause

				# Informs the user
				echo "Pause: ${PAUSE}"
		fi

		# Play
		if [[ ${COMMAND} == *"play"* ]]; then
				# Delete mpvsocket
				[[ -f "${XDG_RUNTIME_DIR}/mpvsocket" ]] && rm "${XDG_RUNTIME_DIR}/mpvsocket"

				# End already running mpv process
				[[ $(pidof mpv) ]] && killall "mpv"

				# Delete previous mode
				[[ -f ${XDG_RUNTIME_DIR}/mode ]] && rm "${XDG_RUNTIME_DIR}/mode"

				# Delete previous name
				[[ -f ${XDG_RUNTIME_DIR}/name ]] && rm "${XDG_RUNTIME_DIR}/name"

				# Playlist shuffle
				[[ ${COMMAND} ==  *"--shuffle"* ]] && SHUFFLE=true

				# Remove the play word from the command
				COMMAND=$(sed s/play//g <<< ${COMMAND})

				# Check if user is using song name or url
				[[ ${COMMAND} == *"FILE:"*     ]] && MODE=LOCAL_FILE
				[[ ${COMMAND} == *"FOLDER:"*   ]] && MODE=LOCAL_FOLDER
				[[ ${COMMAND} == *"PLAYLIST:"* ]] && MODE=LOCAL_PLAYLIST
				[[ ${COMMAND} == *"URL:"*      ]] && MODE=URL
				[[ ${COMMAND} == *"SEARCH:"*   ]] && MODE=SEARCH

				# Remove the LOCAL: from command
				COMMAND=$(sed s/FILE://g <<<     ${COMMAND})
				COMMAND=$(sed s/FOLDER://g <<<   ${COMMAND})
				COMMAND=$(sed s/SEARCH://g <<<   ${COMMAND})
				COMMAND=$(sed s/URL://g <<<      ${COMMAND})
				COMMAND=$(sed s/PLAYLIST://g <<< ${COMMAND})
				COMMAND=$(sed s/--shuffle//g <<< ${COMMAND})

				if [[ ${MODE} == "LOCAL_FILE" ]]; then

					# Play song
					mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket ${COMMAND} &

					# Save mode
					echo "LOCAL_FILE" >> ${XDG_RUNTIME_DIR}/mode

				elif [[ ${MODE} == "LOCAL_FOLDER" ]]; then

					# Delete previous tmp playlist
					[[ -f "${XDG_RUNTIME_DIR}/tmp_playlist.txt" ]] && rm "${XDG_RUNTIME_DIR}/tmp_playlist.txt"

					# Generate a tmp playlist with files listed on directory
					for f in ${COMMAND}*; do echo ${f} >> ${XDG_RUNTIME_DIR}/tmp_playlist.txt; done

					# Play playlist
					[[ ! "${SHUFFLE}" ]] && mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket --playlist=${XDG_RUNTIME_DIR}/tmp_playlist.txt &
					[[   "${SHUFFLE}" ]] && mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket --shuffle  --playlist=${XDG_RUNTIME_DIR}/tmp_playlist.txt &

					# Save mpde
					echo "LOCAL_FOLDER" >> ${XDG_RUNTIME_DIR}/mode

				elif [[ ${MODE} == "LOCAL_PLAYLIST" ]]; then

					# Delete previous tmp playlist
					[[ -f "${XDG_RUNTIME_DIR}/tmp_playlist.txt" ]] && rm "${XDG_RUNTIME_DIR}/tmp_playlist.txt"

					# Dump command playlist into tmp playlist (IDK why mpv don't work when using the playlist specified by the command)
					for f in $(cat ${COMMAND}); do
						echo ${f} >> ${XDG_RUNTIME_DIR}/tmp_playlist.txt
					done

					# Play playlist
					[[ ! "${SHUFFLE}" ]] && mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket --playlist=${XDG_RUNTIME_DIR}/tmp_playlist.txt &
					[[   "${SHUFFLE}" ]] && mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket --shuffle  --playlist=${XDG_RUNTIME_DIR}/tmp_playlist.txt &

					# Save mpde
					echo "LOCAL_FOLDER" >> ${XDG_RUNTIME_DIR}/mode

				elif [[ ${MODE} == "SEARCH" ]]; then
					
					# Use search to list musics
					search YOUTUBE:${COMMAND}
					echo ""

					# Ask the user to choose a song
					echo "Enter a song number:"
					read SONG

					# Select song url 
					SONG=$(cat ${TMP_VIDEOS} | sed -n ${SONG}p )

					# Play song
					mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket ${YOUTUBE}${SONG} &

					# Save mode
					echo "SEARCH" >> ${XDG_RUNTIME_DIR}/mode
					echo "$(${YT} --get-title "ytsearch:${COMMAND}")" >> ${XDG_RUNTIME_DIR}/name
				else
					# Play song
					mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket ${COMMAND} &

					# Save name
					echo "URL" >> ${XDG_RUNTIME_DIR}/mode
					echo "$(${YT} --get-title ${COMMAND})" >> ${XDG_RUNTIME_DIR}/name
				fi

				# Wait mpvsocket start listening
				sleep 3

				# Re-enable previous options
				if [[ -f ${XDG_RUNTIME_DIR}/mpvloop && $(cat ${XDG_RUNTIME_DIR}/mpvloop) == "yes" ]]; then
					echo '{ "command": ["set_property", "loop", "yes"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
				fi

				# Informs the user
				if [[ ${MODE} == "SEARCH" ]]; then
					echo "Now Playing:    $(${YT} --get-title ytsearch:"${COMMAND}")"
					echo "Music Duration: $(${YT} --get-duration ytsearch:"${COMMAND}")"
				elif [[ ${MODE} == "URL" ]]; then
					echo "Now Playing:    $(${YT} --get-title ${COMMAND})"
					echo "Music Duration: $(${YT} --get-duration ${COMMAND})"
				elif [[ ${MODE} == "LOCAL_FOLDER" ]]; then
					echo "Playlist size: $(ls ${COMMAND}/ | wc -l)"
					echo "Now Playing: $(basename $(echo '{ "command": ["get_property", "path"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket) | sed 's/\".*//')"
				else
					echo "Now Playing: $(basename ${COMMAND})"
				fi
		fi

		# Loop
	    if [[ ${COMMAND} == "loop" ]]; then

				# Conditions to determine if loop will be enabled or disabled
				if [[ ! -f ${XDG_RUNTIME_DIR}/mpvloop ]]; then
					LOOP=yes
				elif [[ $(cat ${XDG_RUNTIME_DIR}/mpvloop) == "yes" ]]; then
					LOOP=no
				else
					LOOP=yes
				fi

				# Apply
				sed "s/STATE/${LOOP}/g" <<<'{ "command": ["set_property", "loop", "STATE"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null

				# Save loop state
				echo ${LOOP} > ${XDG_RUNTIME_DIR}/mpvloop

				# Informs the user
				echo "Loop: ${LOOP}"

        fi
}

# Check if command is empty
if [[ -z ${COMMAND} ]]; then
		echo "You need to enter a music name/link or a command"
		exit
fi

# Check if mpv is playing anything
if [[ ${COMMAND} != *"play"* && ! $(pgrep -f mpv) ]]; then
		echo "No MPV process detected, first you need to run: music play <music name/link>"
		exit
fi

# Run command function
run_command
